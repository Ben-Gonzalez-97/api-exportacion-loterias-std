# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ItemConsulta(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nombre: str=None, venta: float=None, premio: float=None, porcentaje_venta: float=None, total: float=None, tipo_loteria: str=None, juego: str=None):  # noqa: E501
        """ItemConsulta - a model defined in Swagger

        :param nombre: The nombre of this ItemConsulta.  # noqa: E501
        :type nombre: str
        :param venta: The venta of this ItemConsulta.  # noqa: E501
        :type venta: float
        :param premio: The premio of this ItemConsulta.  # noqa: E501
        :type premio: float
        :param porcentaje_venta: The porcentaje_venta of this ItemConsulta.  # noqa: E501
        :type porcentaje_venta: float
        :param total: The total of this ItemConsulta.  # noqa: E501
        :type total: float
        :param tipo_loteria: The tipo_loteria of this ItemConsulta.  # noqa: E501
        :type tipo_loteria: str
        :param juego: The juego of this ItemConsulta.  # noqa: E501
        :type juego: str
        """
        self.swagger_types = {
            'nombre': str,
            'venta': float,
            'premio': float,
            'porcentaje_venta': float,
            'total': float,
            'tipo_loteria': str,
            'juego': str
        }

        self.attribute_map = {
            'nombre': 'nombre',
            'venta': 'venta',
            'premio': 'premio',
            'porcentaje_venta': 'porcentajeVenta',
            'total': 'total',
            'tipo_loteria': 'tipoLoteria',
            'juego': 'juego'
        }
        self._nombre = nombre
        self._venta = venta
        self._premio = premio
        self._porcentaje_venta = porcentaje_venta
        self._total = total
        self._tipo_loteria = tipo_loteria
        self._juego = juego

    @classmethod
    def from_dict(cls, dikt) -> 'ItemConsulta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ItemConsulta of this ItemConsulta.  # noqa: E501
        :rtype: ItemConsulta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nombre(self) -> str:
        """Gets the nombre of this ItemConsulta.

        Nombre del distribuidor o agencia  # noqa: E501

        :return: The nombre of this ItemConsulta.
        :rtype: str
        """
        return self._nombre

    @nombre.setter
    def nombre(self, nombre: str):
        """Sets the nombre of this ItemConsulta.

        Nombre del distribuidor o agencia  # noqa: E501

        :param nombre: The nombre of this ItemConsulta.
        :type nombre: str
        """

        self._nombre = nombre

    @property
    def venta(self) -> float:
        """Gets the venta of this ItemConsulta.

        Monto total de ventas  # noqa: E501

        :return: The venta of this ItemConsulta.
        :rtype: float
        """
        return self._venta

    @venta.setter
    def venta(self, venta: float):
        """Sets the venta of this ItemConsulta.

        Monto total de ventas  # noqa: E501

        :param venta: The venta of this ItemConsulta.
        :type venta: float
        """

        self._venta = venta

    @property
    def premio(self) -> float:
        """Gets the premio of this ItemConsulta.

        Monto total de premios pagados  # noqa: E501

        :return: The premio of this ItemConsulta.
        :rtype: float
        """
        return self._premio

    @premio.setter
    def premio(self, premio: float):
        """Sets the premio of this ItemConsulta.

        Monto total de premios pagados  # noqa: E501

        :param premio: The premio of this ItemConsulta.
        :type premio: float
        """

        self._premio = premio

    @property
    def porcentaje_venta(self) -> float:
        """Gets the porcentaje_venta of this ItemConsulta.

        Porcentaje de comisión sobre ventas  # noqa: E501

        :return: The porcentaje_venta of this ItemConsulta.
        :rtype: float
        """
        return self._porcentaje_venta

    @porcentaje_venta.setter
    def porcentaje_venta(self, porcentaje_venta: float):
        """Sets the porcentaje_venta of this ItemConsulta.

        Porcentaje de comisión sobre ventas  # noqa: E501

        :param porcentaje_venta: The porcentaje_venta of this ItemConsulta.
        :type porcentaje_venta: float
        """

        self._porcentaje_venta = porcentaje_venta

    @property
    def total(self) -> float:
        """Gets the total of this ItemConsulta.

        Balance total (venta - premio - porcentajeVenta)  # noqa: E501

        :return: The total of this ItemConsulta.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this ItemConsulta.

        Balance total (venta - premio - porcentajeVenta)  # noqa: E501

        :param total: The total of this ItemConsulta.
        :type total: float
        """

        self._total = total

    @property
    def tipo_loteria(self) -> str:
        """Gets the tipo_loteria of this ItemConsulta.

        Tipo de lotería del registro  # noqa: E501

        :return: The tipo_loteria of this ItemConsulta.
        :rtype: str
        """
        return self._tipo_loteria

    @tipo_loteria.setter
    def tipo_loteria(self, tipo_loteria: str):
        """Sets the tipo_loteria of this ItemConsulta.

        Tipo de lotería del registro  # noqa: E501

        :param tipo_loteria: The tipo_loteria of this ItemConsulta.
        :type tipo_loteria: str
        """

        self._tipo_loteria = tipo_loteria

    @property
    def juego(self) -> str:
        """Gets the juego of this ItemConsulta.

        Juego específico del registro  # noqa: E501

        :return: The juego of this ItemConsulta.
        :rtype: str
        """
        return self._juego

    @juego.setter
    def juego(self, juego: str):
        """Sets the juego of this ItemConsulta.

        Juego específico del registro  # noqa: E501

        :param juego: The juego of this ItemConsulta.
        :type juego: str
        """

        self._juego = juego
